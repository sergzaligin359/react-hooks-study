
import React, {useState, useEffect, useContext} from 'react';
import {Link} from 'react-router-dom';

import { useFetch, useLocalStorage } from 'hooks';

import { CurrentUserContext } from 'context/currentUser';

import { BackendErrorsMsg } from 'components';

const Authentication = (props) => {

  const isLogin = props.match.path === '/login';
  const pageTitle = isLogin ? 'Sign in' : 'Sign up';
  const pageUrlRedirect = isLogin ? '/register' : '/login';
  const accauntExist = isLogin ? 'Need an account?' : 'Have an account?';
  const apiUrl = isLogin ? 'users/login' : 'users';

  const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext);

  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');


  const [token, setToken] = useLocalStorage('token');
  const [{ response, isLoading, error }, fetchAuth] = useFetch(apiUrl);

  console.log('currentUserContext ', currentUserState);

  const handleSubmit = event => {
    event.preventDefault();
    const user = isLogin ? {
      email,
      password
    } :
    {
      username,
      email,
      password
    }
    fetchAuth({
      method: 'post',
      data: { user }
    });
  };

  useEffect(() => {
    if(!response) return;
    setToken(response.user.token)
    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user
    }));
  }, [response, setToken, setCurrentUserState]);

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">{ pageTitle }</h1>
            <p className="text-xs-center">
              <Link to={ pageUrlRedirect }>{ accauntExist }</Link>
            </p>
            <form onSubmit={handleSubmit}>
              {
                error ? <BackendErrorsMsg errors={error.errors} /> : null 
              }
              <fieldset>
                {
                  !isLogin && (
                    <fieldset className="form-group">
                      <input
                        type="username"
                        className="form-control form-control-lg"
                        placeholder="Username"
                        value={username}
                        onChange={e => setUsername(e.target.value)}
                      />
                    </fieldset>
                  ) 
                }
                <fieldset className="form-group">
                  <input
                    type="email"
                    className="form-control form-control-lg"
                    placeholder="Email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                  />
                </fieldset>
                <fieldset className="form-group">
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    placeholder="Password"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                  />
                </fieldset>
                <button
                  disabled={isLoading}
                  className="btn btn-lg btn-primary pull-xs-right"
                  type="submit"
                >
                  { pageTitle }
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Authentication
