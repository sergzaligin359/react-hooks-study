import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { useLocalStorage } from 'hooks';

export const useFetch = (url) => {

    const [token] = useLocalStorage('token');

    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const [response, setResponse] = useState(null);
    const [options, setOptions] = useState({})

    const baseUrl = 'https://conduit.productionready.io/api/';

    // doFetch кастомная функция она никогда не кэшируется 
    // и при каждом рендере создаетсz новая кастомная функция doFetch что приводит к бесконечному ререндеру
    // а вот например setIsLoading кэшируется т к является стандартным сетером useState
    const doFetch = useCallback(async (params={}) => {
        try {
            const requestOptions = {
                ...params,
                ...{
                    headers: {
                        authorization: token ? `Token ${token}`: ''
                    }
                }
            };
            setOptions(requestOptions);
            const {data} = await axios(`${baseUrl + url}`, requestOptions);
            setResponse(data);
            setIsLoading(false);
        } catch (error) {
            setError(error.response.data);
            setIsLoading(false);
        }
    }, [url, token]);

    useEffect(() => {
        if(!isLoading) return;
        doFetch(options);
    }, [isLoading, options, doFetch]);

    return [
        { response, isLoading, error },
        doFetch
    ]
} 